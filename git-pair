#!/usr/bin/env bash

PAIRS_CONFIG_PATH=~/.gitpairables

git_pair_help () {
	echo "Usage:"
	echo "  git pair [ list | add | reset | show | help ]"
	echo "  git pair set <nickname-1> [<nickname-2> ... <nickname-n>]"
	echo
	echo "Commands:"
	echo -e "  add\t\tinteractively add a new person's details"
	echo -e "  list\t\tlist existing pairs"
	echo -e "  show\t\tshow the current author name and email"
	echo -e "  set\t\tset specified nicknames as the authors"
	echo -e "  reset\t\tchange author settings back to the original"
	echo -e "  help\t\tprint this information"
}

git_pair_list () {
	cat $PAIRS_CONFIG_PATH | grep -v __original__
	exit $?
}

git_pair_add () {
	if [ ! -e $PAIRS_CONFIG_PATH ]; then
		git_pair_store_original
	fi

	read -p 'Nickname: ' nickname
	read -p 'Name: ' name
	read -p 'Email: ' email

	grep -i ^$nickname, $PAIRS_CONFIG_PATH >/dev/null 2>&1 && exit 1

	echo "$nickname,$name,$email" >> $PAIRS_CONFIG_PATH
	exit $?
}

git_pair_store_original () {
	name=$(git config --get --global user.name)
	email=$(git config --get --global user.email)

	if [ -z "$name" ] || [ -z "$email" ]; then
		return
	fi

	nickname="__original__"
	echo "$nickname,$name,$email" >> $PAIRS_CONFIG_PATH
}

git_pair_set () {
	if [ -z $2 ]; then
		exit 1
	fi

	if [ $2 = '--local' ]; then
		num_args_to_drop=3
		is_local=true
	else
		num_args_to_drop=2
		is_local=false
	fi

	pair_nicks=(${@:$num_args_to_drop})

	names=()
	emails=()

	for nick in ${pair_nicks[*]}; do
		found_line=$(grep -i ^$nick, $PAIRS_CONFIG_PATH) || exit 1
		names+=("`echo $found_line | cut -d',' -f2`")
		emails+=("`echo $found_line | cut -d',' -f3`")
	done

	names_joined=`printf "%s\n" "${names[@]}" | paste -d+ -s - | sed 's/+/ and /g'`

	email_ids=`printf "%s\n" "${emails[@]}" | cut -d@ -f1 | paste -d+ -s -`
	email_host=`echo ${emails[0]} | cut -d@ -f2`

	if $is_local; then
		git config user.name "$names_joined"
		git config user.email "$email_ids@$email_host"
	else
		git config --unset user.name &> /dev/null
		git config --unset user.email &> /dev/null
		git config --global user.name "$names_joined"
		git config --global user.email "$email_ids@$email_host"
	fi

	git config --get user.name
	git config --get user.email
	exit $?
}

git_pair_reset () {
	git pair set __original__
	exit $?
}

command=$1

if [ -z "$command" ]; then
	git_pair_help
	exit 1
fi

if [ $command = 'help' ]; then
	git_pair_help
	exit 0
fi

if [ $command = 'list' ] || [ $command = 'ls' ]; then
	git_pair_list
fi

if [ $command = 'add' ]; then
	git_pair_add
fi

if [ $command = 'set' ]; then
	git_pair_set "$@"
fi

if [ $command = 'reset' ]; then
	git_pair_reset
fi

if [ $command = 'show' ]; then
	git config --get user.name
	git config --get user.email
	exit $?
fi

exit 1
